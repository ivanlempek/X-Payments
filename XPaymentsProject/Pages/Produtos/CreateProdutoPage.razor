@page "/produtos/cadastro"
@inject IProdutoApplicationService ProdutoService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<h3>Cadastro de Produto</h3>

<EditForm Model="@produto" OnValidSubmit="@GravarProduto">
    <DataAnnotationsValidator />
    <MudTextField T="string" Label="Nome" @bind-Value="produto.Nome" For="@(() => produto.Nome)" FullWidth />
    <MudTextField T="string" Label="Descrição" @bind-Value="produto.Descricao" For="@(() => produto.Descricao)" FullWidth multiline="true" />
    <MudNumericField T="int" Label="Garantia (em meses)" @bind-Value="produto.Garantia" For="@(() => produto.Garantia)" FullWidth />
    <MudTextField T="string" Label="E-mail de Suporte" @bind-Value="produto.EmailSuporte" For="@(() => produto.EmailSuporte)" FullWidth />
    

    <MudButton Class="mt-5" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.CloudUpload">
        <InputFile class="botaoUpload" OnChange="@ConverterImagem" />
    </MudButton>

    <div class="button-group botoesFim">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Dark"
                   ButtonType="ButtonType.Submit"
                   Class="mt-5"
                   StartIcon="@Icons.Material.Filled.Save">
            Cadastrar Produto
        </MudButton>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Inherit"
                   Href="/produtos" Class="mt-5 ml-2">
            Voltar
        </MudButton>
    </div>
    
</EditForm>

@code {
    private Produto? produto = new Produto();

    private async Task GravarProduto()
    {
        var resultado = await ProdutoService.AddProduto(produto.Nome, produto.Descricao, base64Imagem, produto.Garantia, produto.EmailSuporte);
        if (resultado.IsSuccess)
        {
            MostrarNotificacaoSucesso();

            produto = new Produto();
            base64Imagem = null;
        } else {
            foreach (var excessao in resultado.Exceptions.InnerExceptions)
            {
                Snackbar.Add($"Erro: {excessao.Message}", Severity.Error);
            }
        }
    }

    private string? base64Imagem;
    private async Task ConverterImagem(InputFileChangeEventArgs e)
    {
        var arquivoImagens = e.GetMultipleFiles();
        if (arquivoImagens != null)
        {
            foreach (var imagem in arquivoImagens)
            {
                using var stream = imagem.OpenReadStream();
                var buffer = new byte[imagem.Size];
                await stream.ReadAsync(buffer);

                base64Imagem = Convert.ToBase64String(buffer);
            }
        }
    }

    private void MostrarNotificacaoSucesso()
    {
        Snackbar.Add("Produto cadastrado com sucesso!", Severity.Success);
    }
}